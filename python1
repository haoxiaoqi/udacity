import unicodecsv

def read_csv(filename):
    with open(filename,'rb') as f:
        reader = unicodecsv.DictReader(f)
        return list(reader)
        
enrollments=read_csv("U:\My Documents\Python Scripts\enrollments.csv")
daily_engagement = read_csv('U:\My Documents\Python Scripts\daily_engagement.csv')
project_submissions = read_csv('U:\My Documents\Python Scripts\project_submissions.csv')

print enrollments[0]
print daily_engagement[0]
print project_submissions[0]

from datetime import datetime as dt

# Takes a date as a string and returns a Python datetime object
def parse_date(date):
  if date == '':
    return None
  else:
    return dt.strptime(date, '%Y-%m-%d')
    
# Takes a string which is either an empty string or represents an integer, and returns an int
def parse_maybe_int(i):
  if i == '':
    return None
  else:
    return int(i)
    
# Clean up the data types in the enrollments table
for enrollment in enrollments:
  enrollment['cancel_date'] = parse_date(enrollment['cancel_date'])
  enrollment['days_to_cancel'] = parse_maybe_int(enrollment['days_to_cancel'])
  enrollment['is_canceled'] = enrollment['is_canceled'] == 'True'
  enrollment['is_udacity'] = enrollment['is_udacity'] == 'True'
  enrollment['join_date'] = parse_date(enrollment['join_date'])

enrollments[0]

for engagement_record in daily_engagement:
  engagement_record['lessons_completed'] = int(float(engagement_record['lessons_completed']))
  engagement_record['num_courses_visited'] = int(float(engagement_record['num_courses_visited']))
  engagement_record['projects_completed'] = int(float(engagement_record['projects_completed']))
  engagement_record['total_minutes_visited'] = float(engagement_record['total_minutes_visited'])
  engagement_record['utc_date'] = parse_date(engagement_record['utc_date'])
    
daily_engagement[0]

for submission in project_submissions:
  submission['completion_date'] = parse_date(submission['completion_date'])
  submission['creation_date'] = parse_date(submission['creation_date'])

project_submissions[0]

def get_unique_students(data):
    unique_students= set()
    for data_point in data:
        unique_students.add(data_point['account_key'])
    return unique_students
    
for engagement_record in daily_engagement:
    engagement_record['account_key']= engagement_record['acct']
    del[engagement_record['acct']]
    
def get_unique_students(data):
    unique_students= set()
    for data_point in data:
        unique_students.add(data_point['account_key'])
    return unique_students

len(enrollments)
unique_enrolled_students = get_unique_students(enrollments)
len(unique_enrolled_students)
len(daily_engagement)
unique_engagement_students = get_unique_students(daily_engagement)
len(unique_engagement_students)
len(project_submissions)
unique_project_submitters = get_unique_students(project_submissions)
len(unique_project_submitters)
daily_engagement[0]['account_key']

for enrollment in enrollments:
    student = enrollment['account_key']
    if student not in engagement_unique_students:
        print enrollment
        break
        
 num_problem_students = 0

for enrollment in enrollments:
    student = enrollment['account_key']
    if student not in engagement_unique_students\
            and enrollment['join_date'] != enrollment['cancel_date']:
        num_problem_students += 1
        print enrollment
        
num_problem_students

udacity_test_accounts = set()
for enrollment in enrollments:
    if enrollment['is_udacity']:
        udacity_test_accounts.add(enrollment['account_key'])
len(udacity_test_accounts)

def remove_udacity_accounts(data):
    non_udacity_data = []
    for data_point in data:
        if data_point['account_key'] not in udacity_test_accounts:
            non_udacity_data.append(data_point)
    return non_udacity_data
    
non_udacity_enrollments = remove_udacity_accounts(enrollments)
non_udacity_engagement = remove_udacity_accounts(daily_engagement)
non_udacity_submissions = remove_udacity_accounts(project_submissions)

print len(non_udacity_enrollments)
print len(non_udacity_engagement)
print len(non_udacity_submissions)
Contact GitHub API Training Shop Blog About
